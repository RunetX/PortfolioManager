#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьЦены(МассивТикеров = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(МассивТикеров) Тогда
		МассивТикеров = _ВсеТикеры();
	КонецЕсли;
	
	Результат = _ТаблицаЦен(МассивТикеров);
	
	Если Результат.ПроизошлаОшибка Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;
	
	ТаблицаЦен = Результат.Данные;
	
	Если Не ЗначениеЗаполнено(ТаблицаЦен) Тогда
		ВызватьИсключение НСтр("ru = 'Не задана таблица с ценами'");
	КонецЕсли;
	
	Период = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = РегистрыСведений.УА_ЦеныИнструментов.СоздатьНаборЗаписей();
		
		Для Каждого ЦенаИнструмента Из ТаблицаЦен Цикл
			
			Инструмент = Справочники.УА_БиржевыеИнструменты.НайтиПоКоду(ЦенаИнструмента.Тикер);
			
			Если Не ЗначениеЗаполнено(Инструмент) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период 	   = Период;
			НоваяЗапись.Инструмент = Инструмент;
			НоваяЗапись.Цена 	   = ЦенаИнструмента.Цена;
			НоваяЗапись.Лот  	   = ЦенаИнструмента.Лот;

		КонецЦикла;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область _Описания

Функция _ДлинаТикера()
    Возврат УА_Константы.ДлинаТикера();
КонецФункции

Функция _ДлинаЦены()
    Возврат УА_Константы.ДлинаЦены();
КонецФункции

Функция _ТочностьЦены()
	Возврат УА_Константы.ТочностьЦены();
КонецФункции

Функция _ДлинаЛота()
    Возврат УА_Константы.ДлинаЛота();
КонецФункции

Функция _ТочностьЛота()
	Возврат УА_Константы.ТочностьЛота();
КонецФункции

#КонецОбласти

Функция _ВсеТикеры()

	ЗапросТикеров = Новый Запрос;
	ЗапросТикеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УА_ИндексыСостав.Инструмент КАК Ссылка
	|ПОМЕСТИТЬ врИнструменты
	|ИЗ
	|	Справочник.УА_Индексы.Состав КАК УА_ИндексыСостав
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УА_ПортфелиСостав.Инструмент
	|ИЗ
	|	Справочник.УА_Портфели.Состав КАК УА_ПортфелиСостав
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БИ.Код КАК Тикер
	|ИЗ
	|	врИнструменты КАК врИнструменты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УА_БиржевыеИнструменты КАК БИ
	|		ПО (БИ.Ссылка = врИнструменты.Ссылка)";
	
	Тикеры = ЗапросТикеров.Выполнить().Выгрузить().ВыгрузитьКолонку("Тикер");
	
	Возврат Тикеры;
	
КонецФункции

Функция _ТаблицаЦен(МассивТикеров)
	
	Результат = УА_ОбщегоНазначения.ОписаниеРезультата();

	ТаблицаЦен = Новый ТаблицаЗначений;
	ТаблицаЦен.Колонки.Добавить("Тикер", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(_ДлинаТикера())));
	ТаблицаЦен.Колонки.Добавить("Цена",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(_ДлинаЦены(), _ТочностьЦены())));
	ТаблицаЦен.Колонки.Добавить("Лот",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(_ДлинаЛота(), _ТочностьЛота())));
	
	// Получаем данные по всем тикерам сразу
	// Здесь важно, что _ДанныеИнструментов уже фильтрует по TQBR
	КлиентАпи = УА_ОбщегоНазначения.КлиентМосбиржи();
	
	ДанныеИнструментовРезультат = КлиентАпи.ДанныеИнструментов(МассивТикеров);

	Если ДанныеИнструментовРезультат.ПроизошлаОшибка Тогда
		Результат.ПроизошлаОшибка = Истина;
		Результат.ТекстОшибки = "Ошибка при получении данных по инструментам: " + ДанныеИнструментовРезультат.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	ДанныеВсехАкции = ДанныеИнструментовРезультат.Данные;

	Если ДанныеВсехАкции = Неопределено 
		Или ДанныеВсехАкции.Получить("securities") = Неопределено
		Или ДанныеВсехАкции.Получить("securities").Получить("columns") = Неопределено
		Или ДанныеВсехАкции.Получить("securities").Получить("data") = Неопределено Тогда
		Сообщить("Отсутствуют необходимые данные 'securities' или 'columns'/'data' в ответе.");
		Возврат Результат;
	КонецЕсли;

	Колонки = ДанныеВсехАкции.Получить("securities").Получить("columns");
	Данные  = ДанныеВсехАкции.Получить("securities").Получить("data");

	Если Колонки.Количество() = 0 Тогда
		Сообщить("Отсутствуют колонки данных 'marketdata'.");
		Возврат Результат;
	КонецЕсли;
	
	Если Данные.Количество() = 0 Тогда
		Сообщить("Отсутствуют данные 'marketdata.data'.");
		Возврат Результат;
	КонецЕсли;

	ИндексТикер  = -1;
	ИндексЦенаLast = -1;
	ИндексЦенаMarket = -1;

	// Определяем индексы колонок
	Для й = 0 По Колонки.Количество() - 1 Цикл
		Если Колонки[й] = "SECID" Тогда
			ИндексТикер = й;
		ИначеЕсли Колонки[й] = "LOTSIZE" Тогда
			ИндексЛот = й;
		ИначеЕсли Колонки[й] = "PREVPRICE" Тогда
			ИндексЦенаPrev = й;
		КонецЕсли;
	КонецЦикла;

	Если ИндексТикер = -1 Тогда
		Сообщить("В полученных данных отсутствует колонка 'SECID'.");
		Возврат Результат;
	КонецЕсли;
	
	// Оставляем только проверку на 'LAST'
	Если ИндексЦенаPrev = -1 Тогда
		Сообщить("В полученных данных отсутствует колонка 'PREVPRICE' для получения последней цены.");
		Возврат Результат;
	КонецЕсли;

	Для Каждого СтрокаДанных Из Данные Цикл
		Если СтрокаДанных.Количество() > ИндексТикер Тогда
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.Тикер = СтрокаДанных[ИндексТикер];

			Цена = 0;
            // Проверяем наличие PREVPRICE и то, что значение не Неопределено
			Если СтрокаДанных.Количество() > ИндексЦенаPrev И СтрокаДанных[ИндексЦенаPrev] <> Неопределено Тогда
				Цена = СтрокаДанных[ИндексЦенаPrev];
			КонецЕсли;
			
			НоваяСтрока.Цена = Цена;
			
			Лот = 1;
            // Проверяем наличие LOTSIZE и то, что значение не Неопределено
			Если СтрокаДанных.Количество() > ИндексЛот И СтрокаДанных[ИндексЛот] <> Неопределено Тогда
				Лот = СтрокаДанных[ИндексЛот];
			КонецЕсли;
			
			НоваяСтрока.Лот = Лот;
			
		КонецЕсли;
	КонецЦикла;

	Результат.Данные = ТаблицаЦен;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти