
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Портфель = Справочники.УА_Портфели.ПортфельПоУмолчанию();
	
	_ПрименитьУсловноеОформлениеКОтклонениям();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция _ДополнитьЦенами(ТаблицаИндексПортфель, ТаблицаЦен)
	
	Результат = УА_ОбщегоНазначения.ОписаниеРезультата(); // Используем стандартный объект результата

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИндексПортфель", ТаблицаИндексПортфель);
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	Запрос.Текст = "ВЫБРАТЬ
	|	тИП.Инструмент КАК Инструмент,
	|	тИП.Вес КАК Вес,
	|	тИП.Количество КАК Количество
	|ПОМЕСТИТЬ врИП
	|ИЗ
	|	&ТаблицаИндексПортфель КАК тИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тЦ.Инструмент КАК Инструмент,
	|	тЦ.Цена КАК Цена
	|ПОМЕСТИТЬ врЦ
	|ИЗ
	|	&ТаблицаЦен КАК тЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врИП.Инструмент КАК Инструмент,
	|	врЦ.Цена КАК Цена,
	|	ЕСТЬNULL(врИП.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(врЦ.Цена, 0) * ЕСТЬNULL(врИП.Количество, 0) КАК Сумма,
	|	ЕСТЬNULL(врИП.Вес, 0) КАК ВесВИндексе,
	|	0 КАК ВесВПортфеле,
	|	0 КАК ОтклонениеВеса
	|ИЗ
	|	врИП КАК врИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ врЦ КАК врЦ
	|		ПО врИП.Инструмент = врЦ.Инструмент";
	Попытка
		ТаблицаСЦенами = Запрос.Выполнить().Выгрузить();
		Результат.Данные = ТаблицаСЦенами;
	Исключение
		Результат.ПроизошлаОшибка = Истина;
		Результат.ТекстОшибки = "Ошибка при выполнении запроса для дополнения ценами: " + ОписаниеОшибки();
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция _ТаблицаЦен(Инструменты)
	
	Результат = УА_ОбщегоНазначения.ОписаниеРезультата();

	ЗапросЦен = Новый Запрос;
	ЗапросЦен.УстановитьПараметр("Инструменты", Инструменты);
	
	ЗапросЦен.Текст = "ВЫБРАТЬ
	|	УА_ЦеныИнструментовСрезПоследних.Инструмент КАК Инструмент,
	|	УА_ЦеныИнструментовСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.УА_ЦеныИнструментов.СрезПоследних КАК УА_ЦеныИнструментовСрезПоследних
	|ГДЕ
	|	УА_ЦеныИнструментовСрезПоследних.Инструмент В(&Инструменты)";
	
	ТаблицаЦен = ЗапросЦен.Выполнить().Выгрузить();

	Результат.Данные = ТаблицаЦен;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция _ТаблицаИндексПортфель()
	
	Результат = УА_ОбщегоНазначения.ОписаниеРезультата();

	РезультатТаблицыИндекса = _ТаблицаПозицийИндекса(Индекс);
	
	Если РезультатТаблицыИндекса.ПроизошлаОшибка Тогда
		Возврат РезультатТаблицыИндекса;
	КонецЕсли;
	
	ТаблицаИндекса = РезультатТаблицыИндекса.Данные;
	ТаблицаИндекса.Сортировать("Вес Убыв");

	РезультатТаблицыПортфеля = _ТаблицаДанныхПортфеля(Портфель);
	
	Если РезультатТаблицыПортфеля.ПроизошлаОшибка Тогда
		Возврат РезультатТаблицыПортфеля; // Передаем ошибку выше
	КонецЕсли;
	ТаблицаПортфеля = РезультатТаблицыПортфеля.Данные;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИндекса",  ТаблицаИндекса);
	Запрос.УстановитьПараметр("ТаблицаПортфеля", ТаблицаПортфеля);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТИ.Инструмент КАК Инструмент,
	|	ТИ.Вес КАК Вес
	|ПОМЕСТИТЬ врИ
	|ИЗ
	|	&ТаблицаИндекса КАК ТИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТП.Инструмент КАК Инструмент,
	|	ТП.Количество КАК Количество
	|ПОМЕСТИТЬ врП
	|ИЗ
	|	&ТаблицаПортфеля КАК ТП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(вИ.Инструмент, вП.Инструмент) КАК Инструмент,
	|	ЕСТЬNULL(вИ.Вес, 0) КАК Вес,
	|	ЕСТЬNULL(вП.Количество, 0) КАК Количество
	|ИЗ
	|	врИ КАК вИ
	|		ПОЛНОЕ СОЕДИНЕНИЕ врП КАК вП
	|		ПО вИ.Инструмент = вП.Инструмент";
	Попытка
		РезультирующаяТаблица = Запрос.Выполнить().Выгрузить();
		Результат.Данные = РезультирующаяТаблица;
	Исключение
		Результат.ПроизошлаОшибка = Истина;
		Результат.ТекстОшибки = "Ошибка при выполнении запроса для объединения данных индекса и портфеля: " + ОписаниеОшибки();
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция _ТаблицаДанныхПортфеля(Портфель)
	
	Результат = УА_ОбщегоНазначения.ОписаниеРезультата();

	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("Портфель", Портфель);
	
	ЗапросДанных.Текст = "ВЫБРАТЬ
	|	УА_ПортфелиСостав.Инструмент КАК Инструмент,
	|	УА_ПортфелиСостав.Количество КАК Количество
	|ИЗ
	|	Справочник.УА_Портфели.Состав КАК УА_ПортфелиСостав
	|ГДЕ
	|	УА_ПортфелиСостав.Ссылка = &Портфель";

	ТаблицаПортфеля = ЗапросДанных.Выполнить().Выгрузить();
	
	Результат.Данные = ТаблицаПортфеля;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция _ТаблицаПозицийИндекса(Индекс)
	
	Результат = УА_ОбщегоНазначения.ОписаниеРезультата();

	Если НЕ ЗначениеЗаполнено(Индекс) Тогда
		Результат.ПроизошлаОшибка = Истина;
		Результат.ТекстОшибки = "Не указан индекс для получения позиций";
		Возврат Результат;
	КонецЕсли;

	Попытка
		ЗапросПозиций = Новый Запрос;
		ЗапросПозиций.УстановитьПараметр("Индекс", Индекс);
		
		ЗапросПозиций.Текст = "ВЫБРАТЬ
		|	УА_ИндексыСостав.Инструмент КАК Инструмент,
		|	УА_ИндексыСостав.Вес КАК Вес
		|ИЗ
		|	Справочник.УА_Индексы.Состав КАК УА_ИндексыСостав
		|ГДЕ
		|	УА_ИндексыСостав.Ссылка = &Индекс
		|	И НЕ УА_ИндексыСостав.Инструмент.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	УА_ИндексыСостав.Вес УБЫВ";
		
		ТаблицаПозиций = ЗапросПозиций.Выполнить().Выгрузить();
		
		Результат.Данные = ТаблицаПозиций;
		
	Исключение
		Результат.ПроизошлаОшибка = Истина;
		Результат.ТекстОшибки = "Ошибка при получении позиций индекса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьИндекс(Команда)
	ПолучитьИндексНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьИндексНаСервере()

	РезультатТаблицыИндексПортфель = _ТаблицаИндексПортфель();
	Если РезультатТаблицыИндексПортфель.ПроизошлаОшибка Тогда
		Сообщить("Ошибка при получении данных портфеля: " + РезультатТаблицыИндексПортфель.ТекстОшибки);
		Возврат;
	КонецЕсли;
	ТаблицаИндексПортфель = РезультатТаблицыИндексПортфель.Данные;
	Если ТаблицаИндексПортфель.Количество() = 0 Тогда
		Сообщить("В портфеле нет позиций для обработки.");
		Возврат;
	КонецЕсли;

	Инструменты = ТаблицаИндексПортфель.ВыгрузитьКолонку("Инструмент");
	
	РезультатТаблицыЦен = _ТаблицаЦен(Инструменты);
	Если РезультатТаблицыЦен.ПроизошлаОшибка Тогда
		Сообщить("Ошибка при получении цен акций: " + РезультатТаблицыЦен.ТекстОшибки);
		Возврат;
	КонецЕсли;
	ТаблицаЦен = РезультатТаблицыЦен.Данные;

	РезультатТаблицыСЦенами = _ДополнитьЦенами(ТаблицаИндексПортфель, ТаблицаЦен);
	Если РезультатТаблицыСЦенами.ПроизошлаОшибка Тогда
		Сообщить("Ошибка при дополнении данных ценами: " + РезультатТаблицыСЦенами.ТекстОшибки);
		Возврат;
	КонецЕсли;
	ТаблицаСЦенами = РезультатТаблицыСЦенами.Данные;

	СуммаПортфеляАкций = ТаблицаСЦенами.Итог("Сумма");

	Для Каждого СтрокаТаблицы Из ТаблицаСЦенами Цикл
		
		Если СуммаПортфеляАкций <> 0 Тогда
			СтрокаТаблицы.ВесВПортфеле = (СтрокаТаблицы.Сумма / СуммаПортфеляАкций) * 100;
		Иначе
			СтрокаТаблицы.ВесВПортфеле = 0;
		КонецЕсли;
		
		 СтрокаТаблицы.ОтклонениеВеса = _ОтносительноеОтклонение(СтрокаТаблицы.ВесВИндексе, СтрокаТаблицы.ВесВПортфеле);
		
	КонецЦикла;

	ИтоговаяТаблица.Загрузить(ТаблицаСЦенами);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныНаСервере()
	РегистрыСведений.УА_ЦеныИнструментов.ЗаполнитьЦены();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦены(Команда)
	ЗаполнитьЦеныНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексНаСервере()
	
	ДанныеОбъекта = Индекс.ПолучитьОбъект();
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.Код) Тогда
		ВызватьИсключение НСтр("ru = 'Заполните код перед заполнением!'");
	КонецЕсли;
	
	ТаблицаЗаполнения = ДанныеОбъекта.Состав.Выгрузить();
	ТаблицаЗаполнения.Очистить();
	
	РезультатПолученияИндекса = Справочники.УА_Индексы.ТаблицаЗаполненияСостава(ДанныеОбъекта.Код, ТаблицаЗаполнения);
	
	Если РезультатПолученияИндекса.ПроизошлаОшибка Тогда
		ВызватьИсключение РезультатПолученияИндекса.ТекстОшибки;
	КонецЕсли;
	
	ДанныеОбъекта.Состав.Загрузить(РезультатПолученияИндекса.Данные);
	ДанныеОбъекта.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндекс(Команда)
	
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите индекс для загрузки его весов'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьИндексНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОптимизироватьПортфельНаСервере()
	
	РезультатОптимизации = УА_ОбщегоНазначения.ОптимизироватьПортфель(Портфель,
								Индекс,
								СуммаЗакупки,
								СтратегияОптимизации);
								
	Если РезультатОптимизации.ПроизошлаОшибка Тогда
		ВызватьИсключение РезультатОптимизации.ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	ТаблицаОпераций.Загрузить(РезультатОптимизации.ТаблицаОпераций);
	
	//Для Каждого Операция Из ТаблицаОпераций Цикл
	//	
	//	ШаблонОперации = "%1 %2 в количестве %3 по цене %4 на сумму %5";
	//	СтрокаОперации = СтрШаблон(ШаблонОперации,
	//		Операция.Инструмент,
	//		Операция.ТипОперации,
	//		Операция.Количество,
	//		Операция.Цена,
	//		Операция.Сумма);
	//	
	//	ОперацииОптимизации = ОперацииОптимизации + СтрокаОперации + Символы.ПС;
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимизироватьПортфель(Команда)
	ОптимизироватьПортфельНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция _ОтносительноеОтклонение(ВесВИндексе, ВесВПортфеле)
	
	Если ВесВИндексе = 0 Тогда
		Возврат 100;
	КонецЕсли;
	
	Отклонение = (ВесВПортфеле - ВесВИндексе) / ВесВИндексе * 100;
	
	Возврат Отклонение;
	
КонецФункции

Процедура _ПрименитьУсловноеОформлениеКОтклонениям()

	// 1. Критическое превышение (> +80%)
	_ПрименитьОформлениеГраницы("ИтоговаяТаблица.ОтклонениеВеса", 
		WebЦвета.СветлоРозовый, 
		ВидСравненияКомпоновкиДанных.Больше, 
		80);

	// 2. Значительное превышение (+30% до +80%)
	_ПрименитьОформлениеДиапазона("ИтоговаяТаблица.ОтклонениеВеса", 
		WebЦвета.СветлоРозовый, 
		30,	80);
	
	// 3. Незначительное превышение (+10% до +30%)
	_ПрименитьОформлениеДиапазона("ИтоговаяТаблица.ОтклонениеВеса", 
		WebЦвета.НейтральноЗеленый, 
		10, 30);

	// 4. Чуть выше нормы (+5% до +10%)
	_ПрименитьОформлениеДиапазона("ИтоговаяТаблица.ОтклонениеВеса", 
		WebЦвета.Роса, 
		5,	10);
	
	// 5. Значительный недовес (-20% до -5%)
	_ПрименитьОформлениеДиапазона("ИтоговаяТаблица.ОтклонениеВеса", 
		WebЦвета.Персиковый, 
		-20, -5);

	// 6. Критический недовес (< -20%)
	_ПрименитьОформлениеГраницы("ИтоговаяТаблица.ОтклонениеВеса", 
		WebЦвета.БледноСиреневый, 
		ВидСравненияКомпоновкиДанных.Меньше, 
		-20);

	// 7. Отсутствие цены
	_ПрименитьОформлениеГраницы("ИтоговаяТаблица.Цена", 
		WebЦвета.СветлоСерый, 
		ВидСравненияКомпоновкиДанных.Равно, 
		0); 
	
КонецПроцедуры

Процедура _ПрименитьОформлениеГраницы(Поле, Цвет, ВидСравнения, ПравоеЗначение)

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ИтоговаяТаблица");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Белый);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , , Истина));
	ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОформления.Отбор.Элементы[0].ВидСравнения = ВидСравнения;
	ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение = ПравоеЗначение;
	
КонецПроцедуры

Процедура _ПрименитьОформлениеДиапазона(Поле, Цвет, НижняяГраница, ВерхняяГраница)

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ИтоговаяТаблица");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет);
	ОтборЭлемент1 = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
	ОтборЭлемент1.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемент1.ПравоеЗначение = НижняяГраница;
	ОтборЭлемент2 = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
	ОтборЭлемент2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемент2.ПравоеЗначение = ВерхняяГраница;
	
КонецПроцедуры

#КонецОбласти